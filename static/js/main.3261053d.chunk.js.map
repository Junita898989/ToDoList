{"version":3,"sources":["components/List/Listitem.js","components/App/App.js","serviceWorker.js","index.js"],"names":["List","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","class","App","state","currentItem","addItem","bind","handleInput","preventDefault","newItem","this","setState","Date","now","filteredItems","filter","console","log","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTA6CeA,MA1Cf,SAAcC,GAkBV,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEzB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACzC,2BACI,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKE,IAAKG,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAC1DZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAML,EAAKE,QACzC,8BAEA,4BAAQD,UAAU,MAAMU,QAAS,WAC7Bf,EAAMgB,WAAWZ,EAAKE,OACvB,uBAAGW,MAAM,wCAMhB,OACI,6BACKhB,IC2HIiB,E,YAxFb,WAAYlB,GAAO,IAAD,8BAChB,4CAAMA,KACDmB,MAAQ,CACXjB,MAAM,GACNkB,YAAY,CACVV,KAAK,GACLJ,IAAI,KAGR,EAAKe,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKN,WAAa,EAAKA,WAAWM,KAAhB,gBAClB,EAAKT,UAAY,EAAKA,UAAUS,KAAf,gBAZD,E,qEAcVV,GACNA,EAAEY,iBACF,IAAMC,EAAUC,KAAKP,MAAMC,YAC3B,GAAmB,KAAhBK,EAAQf,KAAW,CACpB,IAAMR,EAAK,sBAAOwB,KAAKP,MAAMjB,OAAlB,CAAyBuB,IACtCC,KAAKC,SAAS,CACZzB,MAAOA,EACPkB,YAAY,CACVV,KAAK,GACLJ,IAAI,S,kCAKEM,GACVc,KAAKC,SAAS,CACZP,YAAY,CACVV,KAAME,EAAEE,OAAOL,MACfH,IAAKsB,KAAKC,W,iCAILvB,GACT,IAAMwB,EAAeJ,KAAKP,MAAMjB,MAAM6B,QAAO,SAAA3B,GAAI,OAC/CA,EAAKE,MAAMA,KACboB,KAAKC,SAAS,CACZzB,MAAO4B,M,gCAIDpB,EAAKJ,GACb0B,QAAQC,IAAI,SAASP,KAAKP,MAAMjB,OAChC,IAAMA,EAAQwB,KAAKP,MAAMjB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZ0B,QAAQC,IAAI7B,EAAKE,IAAK,OAAOA,GAC7BF,EAAKM,KAAMA,MAGfgB,KAAKC,SAAS,CACZzB,MAAOA,M,+BAMX,OACE,yBAAKG,UAAU,OACb,gCACE,wBAAIA,UAAU,+BAAd,cACA,0BAAMG,GAAG,aAAa0B,SAAUR,KAAKL,SACnC,yBAAKhB,UAAU,cACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,SACX,2BAAOA,UAAU,eAAeE,KAAK,OAAO4B,YAAY,aAAa1B,MAAOiB,KAAKP,MAAMC,YAAYV,KAAMC,SAAUe,KAAKH,eAE5H,yBAAKlB,UAAU,SACX,4BAAQE,KAAK,SAASF,UAAU,mBAAhC,WAKd,yBAAKA,UAAU,YACf,2BAAIqB,KAAKP,MAAMjB,MAAMQ,MAEnB,kBAAC,EAAD,CAAMR,MAAOwB,KAAKP,MAAMjB,MAAOc,WAAYU,KAAKV,WAAYH,UAAWa,KAAKb,mB,GAhFtEuB,IAAMC,WC9DJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3261053d.chunk.js","sourcesContent":["import React from 'react';\nimport './Listitem.css';\n\nfunction List(props){\n    // const items = props.item;\n    // const listItems = items.map(item => {\n    //     return <div className=\"row mx-auto mb-3\" key={item.key}>\n    //         <div className=\"col-12\">\n    //             <div className=\"list bg-warning\">\n    //                 <div className=\"row\">\n    //                     <div className=\"col-9\">\n    //                         <p>{item.text}</p>\n    //                     </div>\n    //                     <div className=\"col-3\">\n    //                         <button className=\"btn\" onClick={ () => props.deleteItem(item.key)}><i className=\"fa fa-trash\"></i></button>\n    //                     </div>\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     </div>\n    // })\n    const items = props.items;\n    const listItems = items.map(item =>\n   {\n       return <div className=\"list\" key={item.key}>\n     <p>\n         <input type=\"text\" id={item.key} value={item.text} onChange={(e)=>{\n             props.setUpdate(e.target.value,item.key)}}/>\n        <span>\n       \n        <button className=\"btn\" onClick={() => {\n            props.deleteItem(item.key)\n        }}><i class=\"text-light fa fa-fw fa-trash\"></i></button>\n        </span>\n     </p>\n     \n    </div>})\n\n    return(\n        <div>\n            {listItems}\n        </div>\n    )\n}\n\nexport default List;","import React from 'react';\nimport './App.css';\nimport List from '../List/Listitem';\n\n// class App extends React.Component{\n\n//     constructor(props){\n//         super(props);\n//         this.state={\n//             items:[],\n//             currentItem:{\n//                 text:'',\n//                 key:''\n//             }\n//         }\n//         this.handleInput = this.handleInput.bind(this);\n//         this.addItem = this.addItem.bind(this);\n//         this.handledeleteItem = this.handledeleteItem.bind(this);\n//     }\n\n//     handleInput(e){\n//         this.setState({\n//             currentItem:{\n//                 text:e.target.value,\n//                 key:Date.now()\n//             }\n//         })\n//     }\n\n//     addItem(e){\n//         e.preventDefault();\n//         const newItem = this.state.currentItem;\n//         // console.log(newItem);\n//         if(newItem.text!==''){\n//             const newItems=[...this.state.items, newItem];\n//             this.setState({\n//                 items:newItems,\n//                 currentItem:{\n//                     text:'',\n//                     key:''\n//                 }\n//             })\n//         }\n//     }\n//     handledeleteItem(key){\n//         const filteredItem = this.state.items.filter(item => item.key!==key);\n//         this.setState({\n//             item:filteredItem\n//         })\n//     }\n\n//     render(){\n//         return(\n//             <div className=\"App\">\n//                 <header>\n//                     <form id=\"to-do-form\" onSubmit={this.addItem}>\n                        // <div className=\"form-group\">\n                        //     <div className=\"row mx-auto\">\n                        //         <div className=\"col-9\">\n                        //             <input className=\"form-control\" type=\"text\" placeholder=\"Enter Text\" value={this.state.currentItem.text} onChange={this.handleInput}/>\n                        //         </div>\n                        //         <div className=\"col-3\">\n                        //             <button type=\"submit\" className=\"btn btn-primary\">Add</button>\n                        //         </div>\n                        //     </div>\n                        // </div>\n//                     </form>\n//                 </header>\n//                 <List item={this.state.items} deleteItem={this.handledeleteItem} />\n//             </div>\n//         );\n//     }\n// }\n// export default App;\nclass App extends React.Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        items:[],\n        currentItem:{\n          text:'',\n          key:''\n        }\n      }\n      this.addItem = this.addItem.bind(this);\n      this.handleInput = this.handleInput.bind(this);\n      this.deleteItem = this.deleteItem.bind(this);\n      this.setUpdate = this.setUpdate.bind(this);\n    }\n    addItem(e){\n      e.preventDefault();\n      const newItem = this.state.currentItem;\n      if(newItem.text !==\"\"){\n        const items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      })\n      }\n    }\n    handleInput(e){\n      this.setState({\n        currentItem:{\n          text: e.target.value,\n          key: Date.now()\n        }\n      })\n    }\n    deleteItem(key){\n      const filteredItems= this.state.items.filter(item =>\n        item.key!==key);\n      this.setState({\n        items: filteredItems\n      })\n  \n    }\n    setUpdate(text,key){\n      console.log(\"items:\"+this.state.items);\n      const items = this.state.items;\n      items.map(item=>{      \n        if(item.key===key){\n          console.log(item.key +\"    \"+key)\n          item.text= text;\n        }\n      })\n      this.setState({\n        items: items\n      })\n      \n     \n    }\n   render(){\n    return (\n      <div className=\"App\">\n        <header>\n          <h3 className=\"pt-3 text-center text-light\">To Do List</h3>\n          <form id=\"to-do-form\" onSubmit={this.addItem}>\n            <div className=\"form-group\">\n                <div className=\"row mx-auto\">\n                    <div className=\"col-9\">\n                        <input className=\"form-control\" type=\"text\" placeholder=\"Enter Task\" value={this.state.currentItem.text} onChange={this.handleInput}/>\n                    </div>\n                    <div className=\"col-3\">\n                        <button type=\"submit\" className=\"btn btn-warning\">Add</button>\n                    </div>\n                </div>\n            </div>\n          </form>\n          <div className=\"listauto\">\n          <p>{this.state.items.text}</p>\n          \n            <List items={this.state.items} deleteItem={this.deleteItem} setUpdate={this.setUpdate}/>\n          </div>\n        </header>\n      </div>\n    );\n   }\n  }\n  \n  \n  export default App;\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}